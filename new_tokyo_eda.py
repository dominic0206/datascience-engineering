# -*- coding: utf-8 -*-
"""New Tokyo EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UjzJs1VGSJvwtPJBQeQucS-GmTe9bw2t
"""

!pip install --upgrade plotly

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d arjunprasadsarkhel/2021-olympics-in-tokyo
!unzip 2021-olympics-in-tokyo.zip

!pip install pyspark

import pyspark
spark = pyspark.sql.SparkSession(pyspark.SparkContext())
spark

import pandas as pd 

def excel_to_csv(name):
  pd.read_excel(name + '.xlsx').to_csv(name + '.csv', sep=',', index=False)

excel_to_csv('Athletes')
excel_to_csv('Coaches')
excel_to_csv('EntriesGender')
excel_to_csv('Medals')
excel_to_csv('Teams')

athletes = pd.read_csv('Athletes.csv')
coaches = pd.read_csv('Coaches.csv')
entries_gender = pd.read_csv('EntriesGender.csv')
medals = pd.read_csv('Medals.csv')
teams = pd.read_csv('Teams.csv')

teams.head()

medals.sort_values('Rank by Total', inplace=True)
medals.head()

import plotly.express as px
fig = px.bar(medals, x='Team/NOC', y=['Gold', 'Silver', 'Bronze'], color_discrete_sequence=['Gold', 'Silver', 'Brown'], title='Number of Medals per country')
fig.show()

coaches.head(5)

spark.read.csv('Coaches.csv', header=True, inferSchema=True).createOrReplaceTempView('Coaches')
spark.sql('Select * from Coaches').show(5)

pd_coaches_query = spark.sql('Select NOC, Count(NOC) as Count from Coaches group by NOC order by NOC').toPandas()
pd_coaches_query.head(7)

fig = px.bar(pd_coaches_query, x='NOC', y='Count', color='Count', title='Number of coaches from each country')
fig.show()

athletes.head()

spark.read.csv('Athletes.csv', header=True, inferSchema=True).createOrReplaceTempView('Athletes')
spark.sql('select * from athletes order by NOC, Discipline').show(20)

spark.sql('''select first(NOC) as NOC, first(Discipline) as Discipline, count(*) as Count from athletes group by NOC, Discipline order by NOC, Discipline''').show(20)

pd_athletes_query = spark.sql('''select first(NOC) as NOC, first(Discipline) as Discipline, count(*) as Count from athletes group by NOC, Discipline order by NOC, Discipline''').toPandas()

fig = px.bar(pd_athletes_query, x='NOC', y='Count', color='Discipline', title='Number of athletes from each country per Discipline')
fig.show()

athletes['Discipline'].value_counts().head(10)

pd_athletes_query = pd_athletes_query.loc[pd_athletes_query['Discipline'].isin(['Athletics', 'Swimming', 'Football'])]
pd_athletes_query.Discipline.value_counts()

fig = px.bar(pd_athletes_query, x='NOC', y='Count', color='Discipline', title='Number of athletes from each country per Discipline')
fig.show()

entries_gender.head(5)

from plotly.subplots import make_subplots
import plotly.graph_objects as go

specs = [[{'type':'domain'}, {'type':'domain'}]] *23
fig = make_subplots(rows=23, cols=2, subplot_titles=entries_gender['Discipline'], specs=specs)
sub_figs = []
for index, row in entries_gender.iterrows():
  sub_fig = go.Pie(labels=['Female', 'Male'], values=[row['Female'], ['Male']])
  sub_figs.append(sub_fig)

k = 0
for i in range(1, 24):
  for j in range(1, 3):
    fig.add_trace(sub_figs[k], i, j)
    k += 1
fig.update_layout(showlegend=False, height=10000, width=800, title_text="Distribution of Gender amongst each game")
fig.update_traces(textposition='inside', textinfo='label+percent', hoverinfo='label+value+percent')

fig = go.Figure(fig)
fig.show()

teams.head()